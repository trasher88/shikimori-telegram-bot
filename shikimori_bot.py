from telegram import Update
from config import TOKEN, ALLOWED_USERS
from shikimori_one import ShikimoriParser
from telegram.ext import Application, CommandHandler, ContextTypes

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CACHE_FILE = 'shikimori_cache.json'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
parser = ShikimoriParser()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
active_chats = set()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = update.effective_chat.id
    active_chats.add(chat_id)  # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ

    await update.message.reply_text(
        "üîî –ë–æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∞–Ω–∏–º–µ —Å Shikimori!\n"
        "–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )


async def send_updates(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        data = parser.get_data(use_cache=False)

        if data['status'] != 'success':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —á–∞—Ç–∞–º
            for chat_id in active_chats:
                try:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Shikimori"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —á–∞—Ç–∞–º
        for chat_id in active_chats:
            try:
                # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–µ—Ä–∏–∏
                if data.get('episodes'):
                    for episode in data['episodes'][:5]:
                        message = (
                            f"üé¨ <b>{episode['title']}</b>\n"
                            f"üìÖ <i>{episode['date']}</i>\n"
                            f"üîπ {episode['episode_info']}"
                        )
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text=message,
                            parse_mode='HTML'
                        )

                # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏
                if data.get('news'):
                    for news in data['news'][:3]:
                        news_msg = (
                            f"üì¢ <b>{news['title']}</b>\n"
                            f"üìÖ {news['date']}\n"
                            f"{news['content'][:200]}..."
                        )
                        await context.bot.send_message(
                            chat_id=chat_id,
                            text=news_msg,
                            parse_mode='HTML'
                        )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {e}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    job_queue = application.job_queue
    job_queue.run_repeating(
        callback=send_updates,
        interval=2 * 3600,
        #interval=60,
        first=10
    )

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    application.run_polling()


if __name__ == '__main__':
    main()